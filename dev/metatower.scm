(define (metatower-ev-cases end)
  `(begin
     (if (tagged? 'reify _e)
         (begin
           (upd! (global) '(:metas) (get (global) '(:metas) (list _this)))
           (upd! (global) '(:level) (get (global) '(:level) 0))
           (set! _level (+ 1 (get (global) '(:level))))
           (set! _meta
                 (if (existsi (get (global) '(:metas)) _level)
                     (geti (reverse (get (global) '(:metas))) _level)
                     #f))
           (if (not _meta)
               (begin
                 (set! _meta (dict (list (cons ':env (dict (list
                                                            (cons ':exp (get _this '(:exp)))
                                                            (cons ':env (get _this '(:env))))))
                                         (cons ':global (global))
                                         (cons ':obj _this)
                                         (cons ':exp (get _this '(:meta-exp) metatower-ev-exp))
                                         (cons ':run (get _this '(:run)))
                                         (cons ':ctx '())
                                         (cons ':stack '())
                                         (cons ':history (dict '())))))
                 (upd! (global) '(:metas) (cons _meta (get (global) '(:metas))))
                 (upd! _this '(:meta) _meta)))
           (upd! _this '(:ctx) _next-ctx)
           (upd! _this '(:stack) (cons ':reify _stack))
           (upd! (global) '(:level) _level)
           (upd! (global) '(:this) _meta)
           (set! _this _meta)
           (set! _ctx ':none)
           (set! _result ':none))
         (if (tagged? 'reflect _e)
             (begin
               (upd! _this '(:meta) _this)
               (set! _level (- (get (global) '(:level)) 1))
               (upd! (global) '(:level) _level)
               (upd! (global) '(:this) (geti (reverse (get (global) '(:metas))) _level))
               (set! _ctx (get _this '(:ctx)))
               (set! _ctx _next-ctx)
               (set! _stack (get _this '(:stack)))
               (set! _result ':reflect)
               (display (get (global) '(:metas))) (newline))
             (if (tagged? 'up _e)
                 (begin
                   (set! _x (geti _e 1))
                   (if (not (symbol? _x))
                       (error 'up (format "up takes a variable, not ~a" _x))
                       (begin
                         (set! _level (+ 1 (get (global) '(:level))))
                         (set! _meta
                               (if (existsi (get (global) '(:metas)) _level)
                                   (geti (reverse (get (global) '(:metas))) _level)
                                   #f))
                         (if (not _meta)
                             (error 'up (format "level ~a does not exists" _level)))
                         (set! _result (get _meta (list ':env _x)))
                         (set! _ctx _next-ctx))))
                 ,end)))))
(define metatower-ev-exp
  (meta-ev-exp metatower-ev-cases))
(define metatower-ev
  (eval `(lambda (process)
           (let* ((_global (get process '(:global) (dict '())))
                  (_ (upd! process '(:global) _global))
                  (_ (upd! process '(:global :this) (get process '(:global :this) process)))
                  (global (lambda () (get process '(:global)))))
             ,metatower-ev-exp))))
