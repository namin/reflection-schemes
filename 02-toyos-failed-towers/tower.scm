;; this is just a tower of environments for now
(define (tower-evl tie this exp jump)
  (let ((envs (get this '(:envs) (list (get this '(:env)))))
        (level (get this '(:level) 0)))
    (cond ((tagged? 'reify exp)
           (if (not (existsi envs (+ level 1)))
               (upd! this '(:envs) (append envs (list (dict '())))))
           (upd! this '(:env) (geti (get this '(:envs)) (+ level 1)))
           (upd! this '(:level) (+ level 1)))
          ((tagged? 'reflect exp)
           (if (<= level 0)
               (error 'tower-evl (format "reflect cannot go below zero levels")))
           (upd! this '(:env) (geti (get this '(:envs)) (- level 1)))
           (upd! this '(:level) (- level 1)))
          ((tagged? 'up exp)
           (let ((x (geti exp 1)))
             (if (not (symbol? x))
                 (error 'up (format "up takes a variable, not ~a" x))
                 (begin
                   (if (not (existsi envs (+ level 1)))
                       (error 'up (format "level ~a does not exists" (+ level 1))))
                   (get (geti envs (+ level 1)) (list x))))))
          (else (evl tie this exp jump)))))
(define (tower-ev this)
  (ev-open tower-evl this))
